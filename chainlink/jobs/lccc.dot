digraph {
//
// Chainlink Job definition for the ratings oracle
//
// First, we parse the request log and the CBOR payload inside of it
decode_log [
    type="ethabidecodelog"
    abi="OracleRequest(bytes32 indexed specId, address requester, bytes32 requestId, uint256 payment, address callbackAddr, bytes4 callbackFunctionId, uint256 cancelExpiration, uint256 dataVersion, bytes data)"
    data="$(jobRun.logData)"
    topics="$(jobRun.logTopics)"
    ]

// The result of the following element is a map
decode_cbor [
    type="cborparse"
    data="$(decode_log.data)"
    mode="diet"
    ]

// Then, we use the decoded request parameters to make an HTTP fetch
fetch [
    type="http"
    method=POST
    requestData="{\"projectId\": $(decode_cbor.projectId), \"cropId\": $(decode_cbor.cropId), \"uaiId\": $(decode_cbor.uaiId)}"
    url="https://lccc.etherisc.com/yield"
    ]


// From the fetch result, we parse out the individual elements
projectId [ type="jsonparse" data="$(fetch)" path="projectId" ]
uaiId [ type="jsonparse" data="$(fetch)" path="uaiId" ]
cropId [ type="jsonparse" data="$(fetch)" path="cropId" ]
aaay [ type="jsonparse" data="$(fetch)" path="aaay" ]


// Finally, we send a response on-chain.
// The abi is the abi of the fulfill function in the receiving contract.
encode_response [
type="ethabiencode"
abi="(bytes32 requestId, bytes32 projectId, bytes32 uaiId, bytes32 cropId, uint256 aaay)"
data="{\"requestId\": $(decode_log.requestId), \"projectId\": $(projectId), \"uaiId\": $(uaiId), \"cropId\": $(cropId), \"aaay\": $(aaay)}"
]

encode_tx [
type="ethabiencode"
abi="fulfillOracleRequest2(bytes32 requestId, uint256 payment, address callbackAddress, bytes4 callbackFunctionId, uint256 expiration, bytes calldata data)"
data="{\"requestId\": $(decode_log.requestId), \"payment\": $(decode_log.payment), \"callbackAddress\": $(decode_log.callbackAddr), \"callbackFunctionId\": $(decode_log.callbackFunctionId), \"expiration\": $(decode_log.cancelExpiration), \"data\": $(encode_response)}"
]
//function fulfillOracleRequest(
 //    bytes32 requestId,
 //    uint256 payment,
 //    address callbackAddress,
 //    bytes4 callbackFunctionId,
 //    uint256 expiration,
 //    bytes32 data
 //  )
submit_tx [
type="ethtx"
to="0x11B6838405f7fd78f4e1501b37D78eCB4e411795"
data="$(encode_tx)"
]

// Dependency graph

decode_log -> decode_cbor -> fetch

fetch -> aaay -> encode_response
fetch -> projectId -> encode_response
fetch -> uaiId -> encode_response
fetch -> cropId -> encode_response

encode_response -> encode_tx -> submit_tx

} //digraph
